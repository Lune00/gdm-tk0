// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "GUI.h"

void demtkGUI::cb_ComputeButton_i(Fl_Button*, void*) {
  //algo.stand();
//write_mgpost("mgp.out.001",spl,nwk);
stopComputation = 0;
//algo.look();
for ( Simu.ns()=Simu.ns()+1;Simu.ns()<=Simu.nsf();++Simu.ns())
  {
     Simu.time()+=Simu.algo()->dt();
     Simu.algo()->step();
   
     
     
     Simu.algo()->look();
     if ( Simu.doAnalyse()&& Simu.ns()%Simu.nAnalyse()  == 0)
		{
			cout<<" simuRun : analyse "<<endl;
			Simu.sysA()->analyse(Simu.time());
		};
     
     if(Simu.ns()%nwiter==0)
       {
         niterOutput->value((double)cdalgo->niter());
         SimuProgressBar->value((double)Simu.ns());
         //Fl::check();
         Fl::redraw();
       }
       
     Simu.algo()->hand(Simu.ns());
           
  
     if(HistorySave && Simu.ns()%Simu.nHist() == 0)
       {
         char name[15];
	 
	 switch(FormatChoose->value())
	 {
	 case 0:
           history_write(iHist,*(Simu.spl()),*(Simu.nwk()),false,saveNetwork,false);
           break;
           
 	 case 1:
           history_write(iHist,*(Simu.spl()),*(Simu.nwk()),true,saveNetwork,false);
           break;
           	 
	 case 2:
           sprintf((char *) name, "mgp.out.%04d",iHist);
           write_mgpost(name,*(Simu.spl()),*(Simu.nwk()),iHist,Simu.time());
	   break; 
	 }
	ofstream time("time.txt",ios::app);
	time<<iHist<<" "<<Simu.time()<<endl;
	time.close();

         
         iHist++;
         NextNumberinput->value((double)iHist);
         //Fl::check();
        }
       
      
     //algo.step(ns);   
       
     
      
			
         
     Fl::check();    
     if (stopComputation) break;   
      
 }
 
updateAlgoValues();
updateControlValues();
}
void demtkGUI::cb_ComputeButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_ComputeButton_i(o,v);
}

void demtkGUI::cb_AlgoButton_i(Fl_Button*, void*) {
  AlgoWindow->show();
}
void demtkGUI::cb_AlgoButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_AlgoButton_i(o,v);
}

void demtkGUI::cb_SampleButton_i(Fl_Button*, void*) {
  SampleWindow->show();
}
void demtkGUI::cb_SampleButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_SampleButton_i(o,v);
}

void demtkGUI::cb_MechanicalButton_i(Fl_Button*, void*) {
  MechanicalWindow->show();
}
void demtkGUI::cb_MechanicalButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_MechanicalButton_i(o,v);
}

void demtkGUI::cb_NetworkButton_i(Fl_Button*, void*) {
  NetworkWindow->show();
}
void demtkGUI::cb_NetworkButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_NetworkButton_i(o,v);
}

void demtkGUI::cb_OneStepButton_i(Fl_Button*, void*) {
  Simu.time()+=Simu.algo()->dt();
Simu.algo()->step();
Simu.algo()->look();

if(Simu.ns()%nwiter ==0)
       {
         niterOutput->value((double)cdalgo->niter());
         SimuProgressBar->value((double)Simu.ns());
         Fl::redraw();
       } 

if ( Simu.doAnalyse()&& Simu.ns()%Simu.nAnalyse()  == 0)
		{
			cout<<" simuRun : analyse "<<endl;
			Simu.sysA()->analyse(Simu.time());
		};    
 
Simu.algo()->hand(Simu.ns()); 

		


/*niterOutput->value((double)cdalgo->niter());
SimuProgressBar->value((double)Simu.ns());  
Fl::check();
Fl::redraw();*/
++Simu.ns();

Fl::check(); 

updateAlgoValues();
updateControlValues();
}
void demtkGUI::cb_OneStepButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_OneStepButton_i(o,v);
}

void demtkGUI::cb_StopButton_i(Fl_Button*, void*) {
  stopComputation = 1;
}
void demtkGUI::cb_StopButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_StopButton_i(o,v);
}

void demtkGUI::cb_nverInput_i(Fl_Value_Input* o, void*) {
  cdalgo->nver() =(unsigned int) o->value();
}
void demtkGUI::cb_nverInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_nverInput_i(o,v);
}

void demtkGUI::cb_nwiterInput_i(Fl_Value_Input* o, void*) {
  nwiter=(unsigned int) o->value();
}
void demtkGUI::cb_nwiterInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_nwiterInput_i(o,v);
}

void demtkGUI::cb_ioutInput_i(Fl_Value_Input* o, void*) {
  Simu.nHist() = (unsigned int) o->value();
}
void demtkGUI::cb_ioutInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_ioutInput_i(o,v);
}

void demtkGUI::cb_Save_i(Fl_Light_Button* o, void*) {
  HistorySave = o->value();
}
void demtkGUI::cb_Save(Fl_Light_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_Save_i(o,v);
}

void demtkGUI::cb_Change_i(Fl_Button*, void*) {
  fl_message("Non implŽmentŽ");
//char * dname = fl_dir_chooser("Choose directory...",NULL,0);

//if(dname != NULL) 
//{
//  WorkingPath = dname;
//};
}
void demtkGUI::cb_Change(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_Change_i(o,v);
}

void demtkGUI::cb_saveNetworkCheckBox_i(Fl_Check_Button* o, void*) {
  saveNetwork = o->value();
}
void demtkGUI::cb_saveNetworkCheckBox(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_saveNetworkCheckBox_i(o,v);
}

void demtkGUI::cb_QuitButton_i(Fl_Button*, void*) {
  // ajouter verifs
exit(0);
}
void demtkGUI::cb_QuitButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_QuitButton_i(o,v);
}

void demtkGUI::cb_SaveDataButton_i(Fl_Button*, void*) {
  char * name = fl_file_chooser("Save data...",NULL,NULL,1);
if(name != NULL) 
{
  Simu.save_data((const char *)name);
};
}
void demtkGUI::cb_SaveDataButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_SaveDataButton_i(o,v);
}

void demtkGUI::cb_analyzeInput_i(Fl_Value_Input* o, void*) {
  Simu.nAnalyse() = (unsigned int) o->value();
}
void demtkGUI::cb_analyzeInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_analyzeInput_i(o,v);
}

void demtkGUI::cb_saveAnalyse_i(Fl_Light_Button* o, void*) {
  if (Simu.sysA()!=NULL)
Simu.doAnalyse() = o->value();
}
void demtkGUI::cb_saveAnalyse(Fl_Light_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_saveAnalyse_i(o,v);
}

void demtkGUI::cb_dtInput_i(Fl_Value_Input* o, void*) {
  Simu.algo()->dt()=o->value();
}
void demtkGUI::cb_dtInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_dtInput_i(o,v);
}

void demtkGUI::cb_nsInput_i(Fl_Value_Input* o, void*) {
  Simu.ns()=(unsigned int)o->value();
}
void demtkGUI::cb_nsInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_nsInput_i(o,v);
}

void demtkGUI::cb_nsfInput_i(Fl_Value_Input* o, void*) {
  Simu.nsf()=(unsigned int)o->value();
SimuProgressBar->maximum((float)o->value());
Fl::redraw();
}
void demtkGUI::cb_nsfInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_nsfInput_i(o,v);
}

void demtkGUI::cb_nitermnInput_i(Fl_Value_Input* o, void*) {
  cdalgo->nitermn()=(unsigned int)o->value();
}
void demtkGUI::cb_nitermnInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_nitermnInput_i(o,v);
}

void demtkGUI::cb_nitermxInput_i(Fl_Value_Input* o, void*) {
  cdalgo->nitermx()=(unsigned int)o->value();
}
void demtkGUI::cb_nitermxInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_nitermxInput_i(o,v);
}

void demtkGUI::cb_epsfInput_i(Fl_Value_Input* o, void*) {
  cdalgo->epsf()=o->value();
}
void demtkGUI::cb_epsfInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_epsfInput_i(o,v);
}

void demtkGUI::cb_AlgoCloseButton_i(Fl_Return_Button*, void*) {
  AlgoWindow->hide();
}
void demtkGUI::cb_AlgoCloseButton(Fl_Return_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_AlgoCloseButton_i(o,v);
}

void demtkGUI::cb_dispOptButton_i(Fl_Button*, void*) {
  DispOptionsWindow->show();
}
void demtkGUI::cb_dispOptButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_dispOptButton_i(o,v);
}

void demtkGUI::cb_zoomInput_i(Fl_Value_Input* o, void*) {
  DisplayArea->size((float)(o->value()));
zoomOutput->value((float)DisplayArea->size());

DisplayArea->redraw();
}
void demtkGUI::cb_zoomInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_zoomInput_i(o,v);
}

void demtkGUI::cb_xshiftInput_i(Fl_Value_Input* o, void*) {
  DisplayArea->xshift((float)(o->value()));
xshiftOutput->value((float)DisplayArea->xshift());
DisplayArea->redraw();
}
void demtkGUI::cb_xshiftInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_xshiftInput_i(o,v);
}

void demtkGUI::cb_yshiftInput_i(Fl_Value_Input* o, void*) {
  DisplayArea->yshift((float)(o->value()));
yshiftOutput->value((float)DisplayArea->yshift());

DisplayArea->redraw();
}
void demtkGUI::cb_yshiftInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_yshiftInput_i(o,v);
}

void demtkGUI::cb_fitButton_i(Fl_Button*, void*) {
  /*
spl.updateBoundaries();
float l = spl.xmax() - spl.xmin();
float h = spl.ymax() - spl.ymin();
float L = 500.;
float H = 500.;

float size_factor = (l>h) ? L/l : H/h;
float xtrans = spl.xmin() + 0.5 * l;
float ytrans = spl.ymin() + 0.5 * h;

DisplayArea->size(size_factor);
DisplayArea->xshift(-xtrans);
DisplayArea->yshift(-ytrans);

updateDispOptionsValues();
DisplayArea->redraw();
*/;
}
void demtkGUI::cb_fitButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_fitButton_i(o,v);
}

void demtkGUI::cb_UpButton_i(Fl_Button*, void*) {
  DisplayArea->addyshift(-1);
DisplayArea->redraw();
yshiftOutput->value((float)DisplayArea->yshift());
Fl::redraw();
}
void demtkGUI::cb_UpButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_UpButton_i(o,v);
}

void demtkGUI::cb_DownButton_i(Fl_Button*, void*) {
  DisplayArea->addyshift(+1);
yshiftOutput->value((float)DisplayArea->yshift());

DisplayArea->redraw();
}
void demtkGUI::cb_DownButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_DownButton_i(o,v);
}

void demtkGUI::cb_RightButton_i(Fl_Button*, void*) {
  DisplayArea->addxshift(-1);
xshiftOutput->value((float)DisplayArea->xshift());

DisplayArea->redraw();
}
void demtkGUI::cb_RightButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_RightButton_i(o,v);
}

void demtkGUI::cb_LeftButton_i(Fl_Button*, void*) {
  DisplayArea->addxshift(+1);
xshiftOutput->value((float)DisplayArea->xshift());

DisplayArea->redraw();
}
void demtkGUI::cb_LeftButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_LeftButton_i(o,v);
}

void demtkGUI::cb_ZoomButton_i(Fl_Button*, void*) {
  DisplayArea->addsize(1);
zoomOutput->value((float)DisplayArea->size());
DisplayArea->redraw();
}
void demtkGUI::cb_ZoomButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_ZoomButton_i(o,v);
}

void demtkGUI::cb_deZoomButton_i(Fl_Button*, void*) {
  DisplayArea->addsize(-1);
zoomOutput->value((float)DisplayArea->size());
DisplayArea->redraw();
}
void demtkGUI::cb_deZoomButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_deZoomButton_i(o,v);
}

void demtkGUI::cb_zoomOutput_i(Fl_Value_Output*, void*) {
  zoomOutput->value((float)DisplayArea->size());
}
void demtkGUI::cb_zoomOutput(Fl_Value_Output* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_zoomOutput_i(o,v);
}

void demtkGUI::cb_BodyToTrack_i(Fl_Value_Input* o, void*) {
  DisplayArea->trackingBody((unsigned int)(o->value()));

DisplayArea->redraw();
}
void demtkGUI::cb_BodyToTrack(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_BodyToTrack_i(o,v);
}

void demtkGUI::cb_BodyButton_i(Fl_Check_Button* o, void*) {
  DisplayArea->disp_trackingBody((bool)o->value());
DisplayArea->redraw();
}
void demtkGUI::cb_BodyButton(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_BodyButton_i(o,v);
}

void demtkGUI::cb_ClusterToTrack_i(Fl_Value_Input* o, void*) {
  DisplayArea->trackingCluster((unsigned int)(o->value()));

DisplayArea->redraw();
}
void demtkGUI::cb_ClusterToTrack(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_ClusterToTrack_i(o,v);
}

void demtkGUI::cb_ClusterButton_i(Fl_Check_Button* o, void*) {
  DisplayArea->disp_trackingCluster((bool)o->value());
DisplayArea->redraw();
}
void demtkGUI::cb_ClusterButton(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_ClusterButton_i(o,v);
}

void demtkGUI::cb_FillButton_i(Fl_Check_Button* o, void*) {
  DisplayArea->fill_bodies((bool)o->value());
DisplayArea->redraw();
}
void demtkGUI::cb_FillButton(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_FillButton_i(o,v);
}

void demtkGUI::cb_shapesCheck_i(Fl_Check_Button* o, void*) {
  DisplayArea->disp_shapes((bool)(o->value()));
DisplayArea->redraw();
}
void demtkGUI::cb_shapesCheck(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_shapesCheck_i(o,v);
}

void demtkGUI::cb_orientCheck_i(Fl_Check_Button* o, void*) {
  DisplayArea->disp_orient((bool)(o->value()));
DisplayArea->redraw();
}
void demtkGUI::cb_orientCheck(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_orientCheck_i(o,v);
}

void demtkGUI::cb_velCheck_i(Fl_Check_Button* o, void*) {
  DisplayArea->disp_vel((bool)(o->value()));
DisplayArea->redraw();
}
void demtkGUI::cb_velCheck(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_velCheck_i(o,v);
}

void demtkGUI::cb_clusters_i(Fl_Check_Button* o, void*) {
  DisplayArea->disp_cluster((bool)(o->value()));
DisplayArea->redraw();
}
void demtkGUI::cb_clusters(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_clusters_i(o,v);
}

void demtkGUI::cb_fnCheck_i(Fl_Check_Button* o, void*) {
  DisplayArea->disp_fn((bool)(o->value()));
DisplayArea->redraw();
}
void demtkGUI::cb_fnCheck(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_fnCheck_i(o,v);
}
/*void demtkGUI::cb_fresNormalCheck_i(Fl_Check_Button* o, void*) {
  DisplayArea->disp_fresNormal((bool)(o->value()));
DisplayArea->redraw();
}

void demtkGUI::cb_fresNormalCheck(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_fresNormalCheck_i(o,v);
}*/

void demtkGUI::cb_ftCheck_i(Fl_Check_Button* o, void*) {
  DisplayArea->disp_ft((bool)(o->value()));
DisplayArea->redraw();
}
void demtkGUI::cb_ftCheck(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_ftCheck_i(o,v);
}

void demtkGUI::cb_forcesScaledCheck_i(Fl_Check_Button* o, void*) {
  DisplayArea->fixScalf((bool)(o->value()));
DisplayArea->redraw();
}
void demtkGUI::cb_forcesScaledCheck(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_forcesScaledCheck_i(o,v);
}

void demtkGUI::cb_scalfInput_i(Fl_Value_Input* o, void*) {
  DisplayArea->scalf((float)(o->value()));
DisplayArea->redraw();
}
void demtkGUI::cb_scalfInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_scalfInput_i(o,v);
}

void demtkGUI::cb_locFrameCheck_i(Fl_Check_Button* o, void*) {
  DisplayArea->disp_locFrame((bool)(o->value()));
DisplayArea->redraw();
}
void demtkGUI::cb_locFrameCheck(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_locFrameCheck_i(o,v);
}

void demtkGUI::cb_verletCheck_i(Fl_Check_Button* o, void*) {
  DisplayArea->disp_verlet((bool)(o->value()));
DisplayArea->redraw();
}
void demtkGUI::cb_verletCheck(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_verletCheck_i(o,v);
}

void demtkGUI::cb_fnposCheck_i(Fl_Check_Button* o, void*) {
  DisplayArea->disp_fn_pos((bool)(o->value()));
DisplayArea->redraw();
}
void demtkGUI::cb_fnposCheck(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_fnposCheck_i(o,v);
}

void demtkGUI::cb_fnnegCheck_i(Fl_Check_Button* o, void*) {
  DisplayArea->disp_fn_neg((bool)(o->value()));
DisplayArea->redraw();
}
void demtkGUI::cb_fnnegCheck(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->parent()->user_data()))->cb_fnnegCheck_i(o,v);
}

void demtkGUI::cb_DispOptCloseButton_i(Fl_Button*, void*) {
  DispOptionsWindow->hide();
}
void demtkGUI::cb_DispOptCloseButton(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_DispOptCloseButton_i(o,v);
}

void demtkGUI::cb_Save1_i(Fl_Button*, void*) {
  ofstream opt("display2.opt",ios::out);
opt<<"shapes "<<DisplayArea->disp_shapes()<<endl;
opt<<"vel "<<DisplayArea->disp_vel()<<endl;
opt<<"orient "<<DisplayArea->disp_orient()<<endl;
opt<<"fn "<<DisplayArea->disp_fn()<<endl;
opt<<"ft "<<DisplayArea->disp_ft()<<endl;
opt<<"verlet "<<DisplayArea->disp_verlet()<<endl;
opt<<"locFrame "<<DisplayArea->disp_locFrame()<<endl<<endl;

opt<<"size "<<DisplayArea->size()<<endl;
opt<<"xshift "<<DisplayArea->xshift()<<endl;
opt<<"yshift "<<DisplayArea->yshift()<<endl<<endl;

opt<<"scalf "<<DisplayArea->scalf()<<endl;
opt<<"scalv "<<DisplayArea->scalv()<<endl<<endl;
}
void demtkGUI::cb_Save1(Fl_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void demtkGUI::cb_dverletInput_i(Fl_Value_Input* o, void*) {
  Simu.nwk()->dverlet()=o->value();
DisplayArea->redraw();
}
void demtkGUI::cb_dverletInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_dverletInput_i(o,v);
}

void demtkGUI::cb_dsuperInput_i(Fl_Value_Input* o, void*) {
  Simu.nwk()->dsuperList()=(double) o->value();
DisplayArea->redraw();
}
void demtkGUI::cb_dsuperInput(Fl_Value_Input* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_dsuperInput_i(o,v);
}

void demtkGUI::cb_NetworkCloseButton_i(Fl_Return_Button*, void*) {
  NetworkWindow->hide();
}
void demtkGUI::cb_NetworkCloseButton(Fl_Return_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_NetworkCloseButton_i(o,v);
}

void demtkGUI::cb_SuperButton_i(Fl_Check_Button* o, void*) {
  Simu.nwk()->useSuperList() = (bool) o->value();
DisplayArea->redraw();
}
void demtkGUI::cb_SuperButton(Fl_Check_Button* o, void* v) {
  ((demtkGUI*)(o->parent()->user_data()))->cb_SuperButton_i(o,v);
}

demtkGUI::demtkGUI() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = ControlWindow = new Fl_Double_Window(566, 465, "Control Panel");
    w = o;
    o->user_data((void*)(this));
    { Fl_Button* o = ComputeButton = new Fl_Button(5, 280, 105, 37, "Compute");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->labelfont(1);
      o->labelsize(20);
      o->callback((Fl_Callback*)cb_ComputeButton);
    }
    { Fl_Group* o = PanelsGrp = new Fl_Group(5, 19, 110, 132, "Data");
      o->box(FL_PLASTIC_THIN_DOWN_BOX);
      { Fl_Button* o = AlgoButton = new Fl_Button(12, 27, 95, 20, "Algorithm");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
        o->callback((Fl_Callback*)cb_AlgoButton);
      }
      { Fl_Button* o = SampleButton = new Fl_Button(12, 47, 95, 20, "Sample");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
        o->callback((Fl_Callback*)cb_SampleButton);
      }
      { Fl_Button* o = SystemButton = new Fl_Button(12, 85, 95, 20, "System");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
      }
      { Fl_Button* o = MechanicalButton = new Fl_Button(12, 105, 95, 20, "Mechanical");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
        o->callback((Fl_Callback*)cb_MechanicalButton);
      }
      { Fl_Button* o = AlteractionButton = new Fl_Button(12, 125, 95, 20, "Alterations");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
      }
      { Fl_Button* o = NetworkButton = new Fl_Button(12, 65, 95, 20, "Network");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
        o->callback((Fl_Callback*)cb_NetworkButton);
      }
      o->end();
    }
    { Fl_Value_Output* o = niterOutput = new Fl_Value_Output(356, 279, 165, 38);
      o->box(FL_PLASTIC_DOWN_FRAME);
      o->color(FL_BACKGROUND2_COLOR);
      o->textfont(13);
      o->textsize(30);
      o->textcolor(4);
    }
    { Fl_Progress* o = SimuProgressBar = new Fl_Progress(5, 323, 315, 12);
      o->selection_color(FL_FOREGROUND_COLOR);
    }
    { Fl_Button* o = OneStepButton = new Fl_Button(215, 280, 105, 37, "One step");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->labelfont(1);
      o->labelsize(20);
      o->callback((Fl_Callback*)cb_OneStepButton);
    }
    { Fl_Button* o = StopButton = new Fl_Button(110, 280, 105, 37, "Stop");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->labelfont(1);
      o->labelsize(20);
      o->callback((Fl_Callback*)cb_StopButton);
    }
    { Fl_Group* o = new Fl_Group(120, 20, 175, 130, "Updating counters");
      o->box(FL_PLASTIC_THIN_DOWN_BOX);
      { Fl_Value_Input* o = nverInput = new Fl_Value_Input(210, 55, 80, 20, "Neighbor list:");
        o->tooltip("update de niter every nwtier steps");
        o->callback((Fl_Callback*)cb_nverInput);
      }
      { Fl_Value_Input* o = nwiterInput = new Fl_Value_Input(210, 30, 80, 20, "Graphic:");
        o->tooltip("update de niter every nwtier steps");
        o->callback((Fl_Callback*)cb_nwiterInput);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(5, 185, 540, 65, "History");
      o->box(FL_PLASTIC_THIN_DOWN_BOX);
      { Fl_Value_Input* o = ioutInput = new Fl_Value_Input(55, 194, 45, 20, "steps:");
        o->tooltip("Number of steps between two historical save");
        o->minimum(1);
        o->maximum(10000);
        o->value(10);
        o->callback((Fl_Callback*)cb_ioutInput);
      }
      { Fl_Light_Button* o = new Fl_Light_Button(480, 193, 60, 20, "Save");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
        o->selection_color((Fl_Color)2);
        o->callback((Fl_Callback*)cb_Save);
      }
      { Fl_Value_Input* o = NextNumberinput = new Fl_Value_Input(433, 193, 35, 20, "Next number:");
        o->minimum(1);
        o->maximum(999);
        o->value(1);
      }
      { Fl_Button* o = new Fl_Button(480, 219, 60, 20, "Change");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Change);
      }
      { Fl_Choice* o = FormatChoose = new Fl_Choice(159, 194, 181, 20, "Format:");
        o->down_box(FL_BORDER_BOX);
        FormatChoose->add("dem-tk (One file)");
        FormatChoose->add("dem-tk (Two file)");
        FormatChoose->add("mgpost");
        FormatChoose->value(0);
      }
      WorkPathNameOutput = new Fl_Output(105, 220, 370, 20, "Working path:");
      o->end();
    }
    { Fl_Group* o = new Fl_Group(305, 19, 235, 129, "Files");
      o->box(FL_PLASTIC_THIN_DOWN_BOX);
      { Fl_Check_Button* o = saveNetworkCheckBox = new Fl_Check_Button(414, 31, 110, 19, "with network");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_saveNetworkCheckBox);
      }
      { Fl_Button* o = QuitButton = new Fl_Button(316, 108, 80, 20, "Quit");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
        o->callback((Fl_Callback*)cb_QuitButton);
      }
      { Fl_Button* o = SaveDataButton = new Fl_Button(316, 29, 80, 20, "Save Data");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
        o->callback((Fl_Callback*)cb_SaveDataButton);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(115, 371, 265, 49, "Analysis");
      o->box(FL_PLASTIC_THIN_DOWN_BOX);
      { Fl_Value_Input* o = analyzeInput = new Fl_Value_Input(165, 387, 40, 23, "steps:");
        o->tooltip("Number of steps between two analysis save");
        o->minimum(1);
        o->maximum(10000);
        o->value(123);
        o->callback((Fl_Callback*)cb_analyzeInput);
      }
      { Fl_Light_Button* o = saveAnalyse = new Fl_Light_Button(240, 385, 115, 25, "saveAnalyse");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
        o->selection_color((Fl_Color)2);
        o->callback((Fl_Callback*)cb_saveAnalyse);
      }
      o->end();
    }
    o->end();
  }
  { Fl_Double_Window* o = AlgoWindow = new Fl_Double_Window(226, 262, "Algorithm");
    w = o;
    o->user_data((void*)(this));
    { Fl_Value_Input* o = dtInput = new Fl_Value_Input(100, 11, 115, 20, "time step:");
      o->tooltip("Time step");
      o->value(0.0001);
      o->callback((Fl_Callback*)cb_dtInput);
    }
    { Fl_Value_Input* o = nsInput = new Fl_Value_Input(100, 35, 115, 20, "current step:");
      o->tooltip("Current step number");
      o->maximum(1e+30);
      o->step(1);
      o->callback((Fl_Callback*)cb_nsInput);
    }
    { Fl_Value_Input* o = nsfInput = new Fl_Value_Input(100, 60, 115, 20, "last step:");
      o->tooltip("Final step number");
      o->maximum(1e+30);
      o->step(1);
      o->value(100);
      o->callback((Fl_Callback*)cb_nsfInput);
    }
    { Fl_Value_Input* o = tInput = new Fl_Value_Input(100, 85, 115, 20, "current time:");
      o->maximum(10000);
    }
    { Fl_Value_Input* o = nitermnInput = new Fl_Value_Input(100, 129, 115, 20, "nb iter mini:");
      o->tooltip("Minimum number of atoms");
      o->maximum(1e+20);
      o->step(1);
      o->value(3);
      o->callback((Fl_Callback*)cb_nitermnInput);
    }
    { Fl_Value_Input* o = nitermxInput = new Fl_Value_Input(100, 154, 115, 20, "nb iter maxi:");
      o->tooltip("Maximum number of atoms");
      o->maximum(1e+20);
      o->step(1);
      o->value(100);
      o->callback((Fl_Callback*)cb_nitermxInput);
    }
    { Fl_Value_Input* o = epsfInput = new Fl_Value_Input(100, 179, 115, 20, "epsf:");
      o->tooltip("Accuracy of mean forces");
      o->value(0.001);
      o->callback((Fl_Callback*)cb_epsfInput);
    }
    { Fl_Return_Button* o = AlgoCloseButton = new Fl_Return_Button(60, 220, 110, 25, "Close");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_AlgoCloseButton);
    }
    o->end();
  }
  { Fl_Double_Window* o = SampleWindow = new Fl_Double_Window(602, 574, "Sample");
    w = o;
    o->user_data((void*)(this));
    { Display* o = DisplayArea = new Display(10, 35, 500, 500, "DISPLAY AREA");
      o->box(FL_ENGRAVED_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Button* o = dispOptButton = new Fl_Button(10, 5, 65, 25, "Options");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_dispOptButton);
    }
    { Fl_Value_Input* o = zoomInput = new Fl_Value_Input(515, 35, 80, 25, "zoom:");
      o->callback((Fl_Callback*)cb_zoomInput);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_ENTER_KEY);
    }
    { Fl_Value_Input* o = xshiftInput = new Fl_Value_Input(515, 80, 80, 25, "xshift:");
      o->callback((Fl_Callback*)cb_xshiftInput);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_ENTER_KEY);
    }
    { Fl_Value_Input* o = yshiftInput = new Fl_Value_Input(515, 130, 80, 25, "yshift:");
      o->callback((Fl_Callback*)cb_yshiftInput);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_ENTER_KEY);
    }
    { Fl_Button* o = fitButton = new Fl_Button(465, 5, 45, 25, "Fit");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_fitButton);
    }
    { Fl_Button* o = UpButton = new Fl_Button(525, 255, 60, 35, "Up");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_UpButton);
    }
    { Fl_Button* o = DownButton = new Fl_Button(525, 295, 60, 35, "Down");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_DownButton);
    }
    { Fl_Button* o = RightButton = new Fl_Button(525, 390, 60, 35, "Right");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_RightButton);
    }
    { Fl_Button* o = LeftButton = new Fl_Button(525, 350, 60, 35, "Left");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_LeftButton);
    }
    { Fl_Button* o = ZoomButton = new Fl_Button(525, 170, 60, 35, "Z +");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_ZoomButton);
    }
    { Fl_Button* o = deZoomButton = new Fl_Button(525, 210, 60, 35, "Z -");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_deZoomButton);
    }
    { Fl_Value_Output* o = zoomOutput = new Fl_Value_Output(140, 6, 36, 24, "zoom");
      o->color((Fl_Color)46);
      o->callback((Fl_Callback*)cb_zoomOutput);
    }
    { Fl_Value_Output* o = xshiftOutput = new Fl_Value_Output(235, 6, 36, 24, "xshift");
      o->color((Fl_Color)46);
    }
    { Fl_Value_Output* o = yshiftOutput = new Fl_Value_Output(335, 6, 36, 24, "yshift");
      o->color((Fl_Color)46);
    }
    { Fl_Value_Input* o = BodyToTrack = new Fl_Value_Input(130, 539, 50, 26);
      o->callback((Fl_Callback*)cb_BodyToTrack);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Check_Button* o = BodyButton = new Fl_Check_Button(10, 538, 120, 25, "Body Tracking : ");
      o->down_box(FL_DOWN_BOX);
      o->callback((Fl_Callback*)cb_BodyButton);
    }
    { Fl_Value_Input* o = ClusterToTrack = new Fl_Value_Input(355, 539, 50, 26);
      o->callback((Fl_Callback*)cb_ClusterToTrack);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Check_Button* o = ClusterButton = new Fl_Check_Button(225, 538, 120, 25, "Cluster Tracking : ");
      o->down_box(FL_DOWN_BOX);
      o->callback((Fl_Callback*)cb_ClusterButton);
    }
    { Fl_Check_Button* o = FillButton = new Fl_Check_Button(510, 435, 90, 20, "Fill bodies");
      o->down_box(FL_DOWN_BOX);
      o->callback((Fl_Callback*)cb_FillButton);
    }
    o->end();
  }
  { Fl_Double_Window* o = DispOptionsWindow = new Fl_Double_Window(420, 213, "Display Customization");
    w = o;
    o->user_data((void*)(this));
    { Fl_Group* o = dispOptSample = new Fl_Group(15, 20, 135, 140, "Sample");
      o->box(FL_BORDER_BOX);
      { Fl_Check_Button* o = shapesCheck = new Fl_Check_Button(25, 30, 70, 25, "shapes");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_shapesCheck);
      }
      { Fl_Check_Button* o = orientCheck = new Fl_Check_Button(25, 50, 95, 25, "orientations");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_orientCheck);
      }
      { Fl_Check_Button* o = velCheck = new Fl_Check_Button(25, 70, 95, 25, "velocity");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_velCheck);
      }
      { Fl_Check_Button* o = new Fl_Check_Button(25, 95, 80, 15, "clusters");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_clusters);
      }
      o->end();
    }
    { Fl_Group* o = dispOptNetwork = new Fl_Group(165, 20, 245, 140, "Network");
      o->box(FL_BORDER_BOX);
      { Fl_Check_Button* o = fnCheck = new Fl_Check_Button(175, 30, 35, 25, "fn");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_fnCheck);
      }
      { Fl_Check_Button* o = ftCheck = new Fl_Check_Button(175, 50, 35, 25, "ft");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_ftCheck);
      }
	  //modif du 12/03/09
	  /*{ FL_Check_Button* o = fresNormalCheck =new FL_Check_Button(175, 70, 35, 35, "fresNormal");
	    o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_fresNormalCheck);
	  }*/
	  //---------------------------------------------------------------------
      { Fl_Check_Button* o = forcesScaledCheck = new Fl_Check_Button(175, 70, 125, 25, "forces scaled by:");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_forcesScaledCheck);
      }
      { Fl_Value_Input* o = scalfInput = new Fl_Value_Input(310, 70, 90, 25);
        o->callback((Fl_Callback*)cb_scalfInput);
        o->when(FL_WHEN_ENTER_KEY);
      }
      { Fl_Check_Button* o = locFrameCheck = new Fl_Check_Button(175, 105, 100, 25, "local frames");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_locFrameCheck);
      }
      { Fl_Check_Button* o = verletCheck = new Fl_Check_Button(175, 125, 100, 25, "neighbors visibility");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_verletCheck);
      }
      { Fl_Check_Button* o = fnposCheck = new Fl_Check_Button(225, 30, 60, 25, "fn > 0");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_fnposCheck);
      }
      { Fl_Check_Button* o = fnnegCheck = new Fl_Check_Button(290, 30, 60, 25, "fn < 0");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_fnnegCheck);
      }
      o->end();
    }
    { Fl_Button* o = DispOptCloseButton = new Fl_Button(325, 170, 85, 25, "Close");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_DispOptCloseButton);
    }
    { Fl_Button* o = new Fl_Button(190, 170, 125, 25, "Save display.opt");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_Save1);
    }
    o->end();
  }
  { Fl_Double_Window* o = MechanicalWindow = new Fl_Double_Window(204, 402, "Mechanical");
    w = o;
    o->user_data((void*)(this));
    { Fl_Choice* o = parChoice = new Fl_Choice(80, 5, 105, 20, "Parameter:");
      o->down_box(FL_BORDER_BOX);
    }
    { Fl_Choice* o = g1Choice = new Fl_Choice(80, 45, 105, 20, "Groups:");
      o->down_box(FL_BORDER_BOX);
    }
    { Fl_Choice* o = g2Choice = new Fl_Choice(80, 65, 105, 20);
      o->down_box(FL_BORDER_BOX);
    }
    parValueInput = new Fl_Value_Input(80, 95, 105, 20, "Value:");
    o->end();
  }
  if(dataReadOK == false)
  {
  char * name = fl_file_chooser("Load data...",NULL,NULL,0);
  if(name != NULL) 
    {
    string dirName(name);
    dirName.erase(dirName.rfind("/"),dirName.length());
    chdir(dirName.c_str());
    Simu.read_data((const char *)name);
    dataReadOK = true; 
    free(name);
    } 
  }

parChoice->add("mu");
parChoice->add("ah");

g1Choice->add("Grains");
g1Choice->add("Walls");

g2Choice->add("Grains");
g2Choice->add("Walls");

SampleWindow->show();
ControlWindow->show();
  { Fl_Double_Window* o = NetworkWindow = new Fl_Double_Window(226, 262, "Network");
    w = o;
    o->user_data((void*)(this));
    { Fl_Value_Input* o = dverletInput = new Fl_Value_Input(100, 11, 115, 20, "dverlet:");
      o->tooltip("Verlet distance");
      o->maximum(10);
      o->value(0.0001);
      o->callback((Fl_Callback*)cb_dverletInput);
    }
    { Fl_Value_Input* o = dsuperInput = new Fl_Value_Input(100, 75, 115, 20, "dsuperList:");
      o->tooltip("Current step number");
      o->maximum(1e+30);
      o->callback((Fl_Callback*)cb_dsuperInput);
    }
    { Fl_Return_Button* o = NetworkCloseButton = new Fl_Return_Button(60, 220, 110, 25, "Close");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_NetworkCloseButton);
    }
    { Fl_Check_Button* o = SuperButton = new Fl_Check_Button(20, 55, 115, 15, "Use super list");
      o->down_box(FL_DOWN_BOX);
      o->callback((Fl_Callback*)cb_SuperButton);
      o->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
    }
    o->end();
  }
}

void demtkGUI::updateAlgoValues() {
  dtInput->value(cdalgo->dt());
nsInput->value((double)Simu.ns());
nsfInput->value((double) Simu.nsf());
nitermnInput->value((double)cdalgo->nitermn());
nitermxInput->value((double)cdalgo->nitermx());
tInput->value(Simu.time());
epsfInput->value(cdalgo->epsf());
}

void demtkGUI::updateControlValues() {
  nwiterInput->value((double)nwiter);
//nwpostInput->value((double)algo.nwpost());
nverInput->value((double)cdalgo->nver());
ioutInput->value((double)Simu.nHist() );

analyzeInput->value((double)Simu.nAnalyse() );
saveAnalyse->value(Simu.doAnalyse());

SimuProgressBar->minimum((float)Simu.nsi());
SimuProgressBar->maximum((float)Simu.nsf());

WorkPathNameOutput->value(WorkingPath.c_str());
saveNetworkCheckBox->value(saveNetwork);
}

void demtkGUI::updateDispOptionsValues() {
  zoomInput->value(DisplayArea->size());
xshiftInput->value(DisplayArea->xshift());
yshiftInput->value(DisplayArea->yshift());

shapesCheck->value(DisplayArea->disp_shapes());
orientCheck->value(DisplayArea->disp_orient());
velCheck->value(DisplayArea->disp_vel());


fnCheck->value(DisplayArea->disp_fn());
fnposCheck->value(DisplayArea->disp_fn_pos());
fnnegCheck->value(DisplayArea->disp_fn_neg());
//modif du 12/03/09
//fresNormalCheck->value(DisplayArea->disp_fresNormal());

ftCheck->value(DisplayArea->disp_ft());
forcesScaledCheck->value(DisplayArea->fixScalf());
scalfInput->value(DisplayArea->scalf());
locFrameCheck->value(DisplayArea->disp_locFrame());
verletCheck->value(DisplayArea->disp_verlet());
}

int main(int argc,char **argv) {
  char * name = 0;

switch(argc)
{
  case 2:
    Simu.read_data(argv[1]);
    dataReadOK = true;
    break;

  default:
    name = fl_file_chooser("Load data...",NULL,NULL,0);
    if(name != NULL) 
      {
      // bricolage... a rendre propre
      cout << name << endl;
      string dirName(name);
      dirName.erase(dirName.rfind("/"),dirName.length());
      WorkingPath = dirName;
      chdir(dirName.c_str());
      cout << dirName << endl;
      Simu.read_data((const char *)name);
      dataReadOK = true; 
      free(name);
      }  
    break; 
    // cerr << "@GUI, Usage: " << argv[0] << " sampleFile" << endl;
    
}
 
cdalgo = dynamic_cast < CDalgo*>( Simu.algo());

//! \todo
//! lorsqu'on doucle-clique sur l'appli GUI est bien construit
//! mais read_data n'est pas appele... Bizard!!!!

// system CL
cdalgo->algoFill();
Simu.sys()->init();
if (Simu.sys()->check() == 0) return 0;

if ( Simu.doAnalyse()) Simu.sysA()->initAnalyse();

demtkGUI* GUI = new demtkGUI();
GUI->DisplayArea->sim()=&Simu;
/*GUI->DisplayArea->spl()=Simu.spl();
GUI->DisplayArea->nwk()=Simu.nwk();
GUI->DisplayArea->sys()=Simu.sys();*/

GUI->updateAlgoValues();
GUI->updateControlValues();
GUI->updateDispOptionsValues();


Simu.algo()->stand();
Simu.algo()->look();
Fl::check();
Fl::redraw();

return Fl::run();
}
